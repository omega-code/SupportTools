using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using MongoDB.Bson;
using MongoDB.Driver;
using MoreLinq;

namespace EventFlow.Mongo
{
	partial class Program
	{
		private static void RenderEnsuringCommandsSourceAndToolIds(IMongoDatabase database, string type,
			Dictionary<string, string> catToSkuMap)
		{
			var catRegex = new Regex(
				$@"public static readonly {type}CategoryId (?<codeName>\w+) = With\(""(?<id>[-\w\d]+)""\);"
			);


			var categories = File
				.ReadAllLines($@"/Users/Shared/blumenkraft/ice-is/IceIS.Domain/SharedKernel/{type}CategoryId.cs")
				.Select(l => catRegex.Match(l))
				.Where(m => m.Success)
				.Select(m => new
				{
					CodeName = m.Groups["codeName"].Value,
					CategoryId = m.Groups["id"].Value,
					SkuId = catToSkuMap[m.Groups["id"].Value],
					SkuName = database
						.GetCollection<BsonDocument>($"eventflow-{type.ToLowerInvariant()}skureadmodel")
						.Find(x => x["_id"] == catToSkuMap[m.Groups["id"].Value])
						.Single()
						["Name"].AsString
				})
				.ToArray();

			Console.WriteLine($"==== {type}SkuId values =====");
			categories.ForEach(c => Console.WriteLine(
				$"\t\tpublic static readonly {type}SkuId {c.CodeName} = With(\"{c.SkuId}\");"
			));
			Console.WriteLine($"public static readonly {type}SkuId[] AutogeneratedSkus = {{");
			categories.ForEach(c => Console.WriteLine(
				$"\t\t{c.CodeName},"
			));
			Console.WriteLine("};");

			Console.WriteLine("\n==== EnsuringCommandsSource =====");
			categories.ForEach(c => Console.WriteLine(
				$@"({type}SkuId.{c.CodeName}, new {type}SkuName(""{c.SkuName}""), {type}CategoryId.{c.CodeName}),"));
		}
	}
}